<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="23.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>*此为最简洁版本的推理代码，比Halcon自带例子简单许多许多，作者：广州潜龙，来自GPNU 2023.9.23，转载请注明出处。</c>
<c></c>
<c>*1 取得训练好的模型，模型从DTL里导出，放置于同一目录下</c>
<l>read_dl_model ('model.hdl', DLModelHandle)</l>
<c>*从模型得到相应的预处理参数（你采用DTL训练时候的，如图片大小，通道等）</c>
<l>create_dl_preprocess_param_from_model (DLModelHandle, 'none', 'full_domain', [], [], [], DLPreprocessParam)</l>
<c>*2 查询电脑硬件，如果查不到，抛出异常，终止后续执行</c>
<l>query_available_dl_devices (['runtime', 'runtime'], ['gpu', 'cpu'], DLDeviceHandles)</l>
<l>if (|DLDeviceHandles| == 0)</l>
<l>    throw ('No supported device found to continue.')</l>
<l>endif</l>
<c>*默认将GPU方法赋值</c>
<l>DLDevice := DLDeviceHandles[0]</l>
<c>*赋值给模型参数</c>
<l>set_dl_model_param (DLModelHandle, 'device', DLDevice)</l>
<c>*3 开始推理，首先指定同一目录下的文件夹，名字为：测试图，里面存放的是测试图片</c>
<l>list_image_files ('测试图', 'default', 'follow_links', ImageFiles)</l>
<l>* WindowDict := dict{}</l>
<c>*循环读图和推理</c>
<l>for Index := 0 to |ImageFiles|-1 by 1</l>
<c>    *读图</c>
<l>    read_image (Image, ImageFiles[Index])</l>
<c>    *拿到实际图片大小</c>
<l>    get_image_size (Image, Width, Height)</l>
<c>    * 生成为样本图片</c>
<l>    gen_dl_samples_from_images (Image, DLSample)</l>
<c>    *根据预处理的参数处理为何训练时候同一规格图片</c>
<l>    preprocess_dl_samples (DLSample, DLPreprocessParam)</l>
<c>    *将预处理的图片导入模型进行自推断，并输出结果DLResult，这个参数非常重要</c>
<l>    apply_dl_model (DLModelHandle, DLSample, [], DLResult)</l>
<c>    *在原图最中间显示名字和置信度-肖苏华 方法：显示信息为名称和置信度，然后是图像坐标系，再就是具体的位置，这里显然是居中显示，这里要留意的是XY坐标</c>
<l>    dev_disp_text (DLResult.classification_class_names[0]+' '+DLResult.classification_confidences[0], 'image', Height/2,Width/2, 'green', [], [])</l>
<c>   *暂停函数</c>
<l>    stop ()</l>
<l>endfor</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="clean_up_output">
<interface>
<ic>
<par name="OutputDir" base_type="ctrl" dimension="0"/>
<par name="RemoveResults" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* This local example procedure cleans up the output of the example.</c>
<c>* </c>
<l>if (not RemoveResults)</l>
<l>    return ()</l>
<l>endif</l>
<c>* Display a warning.</c>
<l>dev_open_window (0, 0, 600, 300, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>WarningCleanup := ['Congratulations, you have finished the example.', '', 'Unless you would like to use the output data / model,', 'press F5 to clean up.']</l>
<l>dev_disp_text (WarningCleanup, 'window', 'center', 'center', ['black', 'black', 'coral', 'coral', 'coral'], [], [])</l>
<c>* </c>
<l>stop ()</l>
<l>dev_close_window ()</l>
<c>* </c>
<c>* Delete all outputs of the example.</c>
<l>remove_dir_recursively (OutputDir)</l>
<l>delete_file ('model_best.hdl')</l>
<l>delete_file ('model_best_info.hdict')</l>
<l>return ()</l>
</body>
<docu id="clean_up_output">
<parameters>
<parameter id="OutputDir"/>
<parameter id="RemoveResults"/>
</parameters>
</docu>
</procedure>
</hdevelop>
